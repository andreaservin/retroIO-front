import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import NavBar from '../../components/common/NavBar'
import { Button, Col, Container, Row } from 'react-bootstrap'
import Card from '../../components/Card'
import Ticket from '../../components/Ticket'
import Search from '../../components/common/Search'
import Form from '../../components/Ticket/form'
import Loading from '../../components/common/Loading'
import useApplicationContext from '../../hooks/useApplicationContext'
import useGet from '../../hooks/useGet'
import usePost from '../../hooks/usePost'
import usePatch from '../../hooks/usePatch'

const DEFAULT_TYPES = {
  WENT_WELL: 'wentWell',
  TO_IMPROVE: 'toImprove',
  KUDOS: 'kudos',
}

export default function Home() {
  const router = useRouter()
  const { user } = useApplicationContext()
  const [search, setSearch] = useState('')
  const [tickets, setTickets] = useState([])
  const [showForm, setShowForm] = useState(false)
  const {
    data,
    loading: loadingTickets,
    error: errorTickets,
    execute: getTickets,
  } = useGet('/tickets')
  const {
    data: dataSaveTicket,
    loading: loadingSaveTickets,
    error: errorSaveTickets,
    execute: saveTickets,
  } = usePost('/tickets')
  const {
    data: dataUpdateTicket,
    loading: loadingUpdateTickets,
    error: errorUpdateTickets,
    execute: updateTickets,
  } = usePatch('/tickets')

  const handleSearch = () => {
    setTickets(
      data?.filter((ticket) =>
        ticket.description.toLowerCase().match(search.toLowerCase())
      )
    )
  }

  const handleSaveTicket = (ticket) => {
    if (ticket._id) {
      updateTickets(ticket._id, ticket)
    } else {
      saveTickets(ticket)
    }
  }

  const handleAddLike = (id) => {}

  useEffect(() => {
    getTickets()
  }, [])

  useEffect(() => {
    setTickets(data)
  }, [data])

  useEffect(() => {
    handleSearch()
  }, [search])

  useEffect(() => {
    getTickets()
  }, [dataSaveTicket, dataUpdateTicket])

  const loading = loadingTickets || loadingSaveTickets || loadingUpdateTickets
  
  return (
    <>
      <Head>
        <title>RetroIO</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/retro-logo.png' />
      </Head>
      {/* { user && */<main>
        <NavBar user={user}>
          <Search value={search} setSearch={setSearch} />
        </NavBar>
        <Container className='mt-3'>
          <div className='d-flex justify-content-between'>
            <h4>My first retro dashboard</h4>
            <Button
              size='sm'
              variant='outline-secondary'
              className='ms-2'
              onClick={() => setShowForm(true)}
            >
              <i className='bi bi-plus-lg me-2'></i>
              Add new card
            </Button>
            <Form
              show={showForm}
              onSave={handleSaveTicket}
              onCancel={() => setShowForm(false)}
            />
          </div>
          <hr />
          {!loading ? (
            <Row>
              <Col sm={4}>
                <Card title='Went well' color='#009588'>
                  {tickets &&
                    tickets
                      ?.filter(
                        (ticket) => ticket.type.name === DEFAULT_TYPES.WENT_WELL
                      )
                      ?.map((ticket, index) => (
                        <Ticket
                          key={index}
                          bg='#009588'
                          data={ticket}
                          onUpdate={handleSaveTicket}
                          onLike={handleAddLike}
                        />
                      ))}
                </Card>
              </Col>
              <Col sm={4}>
                <Card title='To improve' color='#E91F63'>
                  {tickets &&
                    tickets
                      ?.filter(
                        (ticket) =>
                          ticket.type.name === DEFAULT_TYPES.TO_IMPROVE
                      )
                      ?.map((ticket, index) => (
                        <Ticket
                          key={index}
                          bg='#E91F63'
                          data={ticket}
                          onUpdate={handleSaveTicket}
                          onLike={handleAddLike}
                        />
                      ))}
                </Card>
              </Col>
              <Col sm={4}>
                <Card title='Action items' color='#9B29B0'>
                  {tickets &&
                    tickets
                      ?.filter(
                        (ticket) => ticket.type.name === DEFAULT_TYPES.KUDOS
                      )
                      ?.map((ticket, index) => (
                        <Ticket
                          key={index}
                          bg='#9B29B0'
                          data={ticket}
                          onUpdate={handleSaveTicket}
                          onLike={handleAddLike}
                        />
                      ))}
                </Card>
              </Col>
            </Row>
          ) : (
            <Loading />
          )}
        </Container>
      </main>}
    </>
  )
}
